diff --git a/node_modules/devtools-protocol/types/protocol-mapping.d.ts b/node_modules/devtools-protocol/types/protocol-mapping.d.ts
index b9eaf1f..d6e1ea0 100644
--- a/node_modules/devtools-protocol/types/protocol-mapping.d.ts
+++ b/node_modules/devtools-protocol/types/protocol-mapping.d.ts
@@ -482,15 +482,6 @@ export namespace ProtocolMapping {
          * when bfcache navigation fails.
          */
         'Page.backForwardCacheNotUsed': [Protocol.Page.BackForwardCacheNotUsedEvent];
-        /**
-         * Fired when a prerender attempt is completed.
-         */
-        'Page.prerenderAttemptCompleted': [Protocol.Page.PrerenderAttemptCompletedEvent];
-        /**
-         * TODO(crbug/1384419): Create a dedicated domain for preloading.
-         * Fired when a prefetch attempt is updated.
-         */
-        'Page.prefetchStatusUpdated': [Protocol.Page.PrefetchStatusUpdatedEvent];
         'Page.loadEventFired': [Protocol.Page.LoadEventFiredEvent];
         /**
          * Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
@@ -565,6 +556,8 @@ export namespace ProtocolMapping {
          * The following parameters are included in all events.
          */
         'Storage.sharedStorageAccessed': [Protocol.Storage.SharedStorageAccessedEvent];
+        'Storage.storageBucketCreatedOrUpdated': [Protocol.Storage.StorageBucketCreatedOrUpdatedEvent];
+        'Storage.storageBucketDeleted': [Protocol.Storage.StorageBucketDeletedEvent];
         /**
          * Issued when attached to target because of auto-attach or `attachToTarget` command.
          */
@@ -714,6 +707,32 @@ export namespace ProtocolMapping {
          * selectPrompt or cancelPrompt command.
          */
         'DeviceAccess.deviceRequestPrompted': [Protocol.DeviceAccess.DeviceRequestPromptedEvent];
+        /**
+         * Upsert. Currently, it is only emitted when a rule set added.
+         */
+        'Preload.ruleSetUpdated': [Protocol.Preload.RuleSetUpdatedEvent];
+        'Preload.ruleSetRemoved': [Protocol.Preload.RuleSetRemovedEvent];
+        /**
+         * Fired when a prerender attempt is completed.
+         */
+        'Preload.prerenderAttemptCompleted': [Protocol.Preload.PrerenderAttemptCompletedEvent];
+        /**
+         * Fired when a preload enabled state is updated.
+         */
+        'Preload.preloadEnabledStateUpdated': [Protocol.Preload.PreloadEnabledStateUpdatedEvent];
+        /**
+         * Fired when a prefetch attempt is updated.
+         */
+        'Preload.prefetchStatusUpdated': [Protocol.Preload.PrefetchStatusUpdatedEvent];
+        /**
+         * Fired when a prerender attempt is updated.
+         */
+        'Preload.prerenderStatusUpdated': [Protocol.Preload.PrerenderStatusUpdatedEvent];
+        /**
+         * Send a list of sources for all preloading attempts in a document.
+         */
+        'Preload.preloadingAttemptSourcesUpdated': [Protocol.Preload.PreloadingAttemptSourcesUpdatedEvent];
+        'FedCm.dialogShown': [Protocol.FedCm.DialogShownEvent];
     }
 
     export interface Commands {
@@ -4188,6 +4207,27 @@ export namespace ProtocolMapping {
             paramsType: [Protocol.Storage.SetSharedStorageTrackingRequest];
             returnType: void;
         };
+        /**
+         * Set tracking for a storage key's buckets.
+         */
+        'Storage.setStorageBucketTracking': {
+            paramsType: [Protocol.Storage.SetStorageBucketTrackingRequest];
+            returnType: void;
+        };
+        /**
+         * Deletes the Storage Bucket with the given storage key and bucket name.
+         */
+        'Storage.deleteStorageBucket': {
+            paramsType: [Protocol.Storage.DeleteStorageBucketRequest];
+            returnType: void;
+        };
+        /**
+         * Deletes state for sites identified as potential bounce trackers, immediately.
+         */
+        'Storage.runBounceTrackingMitigations': {
+            paramsType: [];
+            returnType: Protocol.Storage.RunBounceTrackingMitigationsResponse;
+        };
         /**
          * Returns information about the system.
          */
@@ -4629,6 +4669,38 @@ export namespace ProtocolMapping {
             paramsType: [Protocol.DeviceAccess.CancelPromptRequest];
             returnType: void;
         };
+        'Preload.enable': {
+            paramsType: [];
+            returnType: void;
+        };
+        'Preload.disable': {
+            paramsType: [];
+            returnType: void;
+        };
+        'FedCm.enable': {
+            paramsType: [Protocol.FedCm.EnableRequest?];
+            returnType: void;
+        };
+        'FedCm.disable': {
+            paramsType: [];
+            returnType: void;
+        };
+        'FedCm.selectAccount': {
+            paramsType: [Protocol.FedCm.SelectAccountRequest];
+            returnType: void;
+        };
+        'FedCm.dismissDialog': {
+            paramsType: [Protocol.FedCm.DismissDialogRequest];
+            returnType: void;
+        };
+        /**
+         * Resets the cooldown time, if any, to allow the next FedCM call to show
+         * a dialog even if one was recently dismissed by the user.
+         */
+        'FedCm.resetCooldown': {
+            paramsType: [];
+            returnType: void;
+        };
     }
 }
 
diff --git a/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts b/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts
index cfb13dd..b2c7a63 100644
--- a/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts
+++ b/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts
@@ -104,6 +104,10 @@ export namespace ProtocolProxyApi {
 
         DeviceAccess: DeviceAccessApi;
 
+        Preload: PreloadApi;
+
+        FedCm: FedCmApi;
+
     }
 
 
@@ -3066,17 +3070,6 @@ export namespace ProtocolProxyApi {
          */
         on(event: 'backForwardCacheNotUsed', listener: (params: Protocol.Page.BackForwardCacheNotUsedEvent) => void): void;
 
-        /**
-         * Fired when a prerender attempt is completed.
-         */
-        on(event: 'prerenderAttemptCompleted', listener: (params: Protocol.Page.PrerenderAttemptCompletedEvent) => void): void;
-
-        /**
-         * TODO(crbug/1384419): Create a dedicated domain for preloading.
-         * Fired when a prefetch attempt is updated.
-         */
-        on(event: 'prefetchStatusUpdated', listener: (params: Protocol.Page.PrefetchStatusUpdatedEvent) => void): void;
-
         on(event: 'loadEventFired', listener: (params: Protocol.Page.LoadEventFiredEvent) => void): void;
 
         /**
@@ -3372,6 +3365,21 @@ export namespace ProtocolProxyApi {
          */
         setSharedStorageTracking(params: Protocol.Storage.SetSharedStorageTrackingRequest): Promise<void>;
 
+        /**
+         * Set tracking for a storage key's buckets.
+         */
+        setStorageBucketTracking(params: Protocol.Storage.SetStorageBucketTrackingRequest): Promise<void>;
+
+        /**
+         * Deletes the Storage Bucket with the given storage key and bucket name.
+         */
+        deleteStorageBucket(params: Protocol.Storage.DeleteStorageBucketRequest): Promise<void>;
+
+        /**
+         * Deletes state for sites identified as potential bounce trackers, immediately.
+         */
+        runBounceTrackingMitigations(): Promise<Protocol.Storage.RunBounceTrackingMitigationsResponse>;
+
         /**
          * A cache's contents have been modified.
          */
@@ -3403,6 +3411,10 @@ export namespace ProtocolProxyApi {
          */
         on(event: 'sharedStorageAccessed', listener: (params: Protocol.Storage.SharedStorageAccessedEvent) => void): void;
 
+        on(event: 'storageBucketCreatedOrUpdated', listener: (params: Protocol.Storage.StorageBucketCreatedOrUpdatedEvent) => void): void;
+
+        on(event: 'storageBucketDeleted', listener: (params: Protocol.Storage.StorageBucketDeletedEvent) => void): void;
+
     }
 
     export interface SystemInfoApi {
@@ -3941,6 +3953,64 @@ export namespace ProtocolProxyApi {
         on(event: 'deviceRequestPrompted', listener: (params: Protocol.DeviceAccess.DeviceRequestPromptedEvent) => void): void;
 
     }
+
+    export interface PreloadApi {
+        enable(): Promise<void>;
+
+        disable(): Promise<void>;
+
+        /**
+         * Upsert. Currently, it is only emitted when a rule set added.
+         */
+        on(event: 'ruleSetUpdated', listener: (params: Protocol.Preload.RuleSetUpdatedEvent) => void): void;
+
+        on(event: 'ruleSetRemoved', listener: (params: Protocol.Preload.RuleSetRemovedEvent) => void): void;
+
+        /**
+         * Fired when a prerender attempt is completed.
+         */
+        on(event: 'prerenderAttemptCompleted', listener: (params: Protocol.Preload.PrerenderAttemptCompletedEvent) => void): void;
+
+        /**
+         * Fired when a preload enabled state is updated.
+         */
+        on(event: 'preloadEnabledStateUpdated', listener: (params: Protocol.Preload.PreloadEnabledStateUpdatedEvent) => void): void;
+
+        /**
+         * Fired when a prefetch attempt is updated.
+         */
+        on(event: 'prefetchStatusUpdated', listener: (params: Protocol.Preload.PrefetchStatusUpdatedEvent) => void): void;
+
+        /**
+         * Fired when a prerender attempt is updated.
+         */
+        on(event: 'prerenderStatusUpdated', listener: (params: Protocol.Preload.PrerenderStatusUpdatedEvent) => void): void;
+
+        /**
+         * Send a list of sources for all preloading attempts in a document.
+         */
+        on(event: 'preloadingAttemptSourcesUpdated', listener: (params: Protocol.Preload.PreloadingAttemptSourcesUpdatedEvent) => void): void;
+
+    }
+
+    export interface FedCmApi {
+        enable(params: Protocol.FedCm.EnableRequest): Promise<void>;
+
+        disable(): Promise<void>;
+
+        selectAccount(params: Protocol.FedCm.SelectAccountRequest): Promise<void>;
+
+        dismissDialog(params: Protocol.FedCm.DismissDialogRequest): Promise<void>;
+
+        /**
+         * Resets the cooldown time, if any, to allow the next FedCM call to show
+         * a dialog even if one was recently dismissed by the user.
+         */
+        resetCooldown(): Promise<void>;
+
+        on(event: 'dialogShown', listener: (params: Protocol.FedCm.DialogShownEvent) => void): void;
+
+    }
 }
 
 export default ProtocolProxyApi;
diff --git a/node_modules/devtools-protocol/types/protocol.d.ts b/node_modules/devtools-protocol/types/protocol.d.ts
index eeb7d2b..23a10ae 100644
--- a/node_modules/devtools-protocol/types/protocol.d.ts
+++ b/node_modules/devtools-protocol/types/protocol.d.ts
@@ -838,6 +838,7 @@ export namespace Protocol {
             Other = 'other',
             PromiseRejection = 'promiseRejection',
             XHR = 'XHR',
+            Step = 'step',
         }
 
         /**
@@ -851,7 +852,7 @@ export namespace Protocol {
             /**
              * Pause reason. (PausedEventReason enum)
              */
-            reason: ('ambiguous' | 'assert' | 'CSPViolation' | 'debugCommand' | 'DOM' | 'EventListener' | 'exception' | 'instrumentation' | 'OOM' | 'other' | 'promiseRejection' | 'XHR');
+            reason: ('ambiguous' | 'assert' | 'CSPViolation' | 'debugCommand' | 'DOM' | 'EventListener' | 'exception' | 'instrumentation' | 'OOM' | 'other' | 'promiseRejection' | 'XHR' | 'step');
             /**
              * Object containing break-specific auxiliary properties.
              */
@@ -911,7 +912,7 @@ export namespace Protocol {
              */
             hash: string;
             /**
-             * Embedder-specific auxiliary data.
+             * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
              */
             executionContextAuxData?: any;
             /**
@@ -986,7 +987,7 @@ export namespace Protocol {
              */
             hash: string;
             /**
-             * Embedder-specific auxiliary data.
+             * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
              */
             executionContextAuxData?: any;
             /**
@@ -1489,7 +1490,7 @@ export namespace Protocol {
          */
         export type ScriptId = string;
 
-        export const enum WebDriverValueType {
+        export const enum DeepSerializedValueType {
             Undefined = 'undefined',
             Null = 'null',
             String = 'string',
@@ -1517,15 +1518,21 @@ export namespace Protocol {
 
         /**
          * Represents the value serialiazed by the WebDriver BiDi specification
-         * https://w3c.github.io/webdriver-bidi.
+         * https://goo.gle/browser-automation-deepserialization.
          */
-        export interface WebDriverValue {
+        export interface DeepSerializedValue {
             /**
-             *  (WebDriverValueType enum)
+             *  (DeepSerializedValueType enum)
              */
             type: ('undefined' | 'null' | 'string' | 'number' | 'boolean' | 'bigint' | 'regexp' | 'date' | 'symbol' | 'array' | 'object' | 'function' | 'map' | 'set' | 'weakmap' | 'weakset' | 'error' | 'proxy' | 'promise' | 'typedarray' | 'arraybuffer' | 'node' | 'window');
             value?: any;
             objectId?: string;
+            /**
+             * Set if value reference met more then once during serialization. In such
+             * case, value is provided only to one of the serialized values. Unique
+             * per value in the scope of one CDP call.
+             */
+            weakLocalObjectReference?: integer;
         }
 
         /**
@@ -1606,7 +1613,7 @@ export namespace Protocol {
             /**
              * WebDriver BiDi representation of the value.
              */
-            webDriverValue?: WebDriverValue;
+            webDriverValue?: DeepSerializedValue;
             /**
              * Unique object identifier (for non-primitive values).
              */
@@ -1899,7 +1906,7 @@ export namespace Protocol {
              */
             uniqueId: string;
             /**
-             * Embedder-specific auxiliary data.
+             * Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
              */
             auxData?: any;
         }
@@ -2114,8 +2121,8 @@ export namespace Protocol {
             uniqueContextId?: string;
             /**
              * Whether the result should contain `webDriverValue`, serialized according to
-             * https://w3c.github.io/webdriver-bidi. This is mutually exclusive with `returnByValue`, but
-             * resulting `objectId` is still provided.
+             * https://goo.gle/browser-automation-deepserialization. This is mutually
+             * exclusive with `returnByValue`, but resulting `objectId` is still provided.
              */
             generateWebDriverValue?: boolean;
         }
@@ -2241,7 +2248,7 @@ export namespace Protocol {
              */
             uniqueContextId?: string;
             /**
-             * Whether the result should be serialized according to https://w3c.github.io/webdriver-bidi.
+             * Whether the result should be serialized according to https://goo.gle/browser-automation-deepserialization.
              */
             generateWebDriverValue?: boolean;
         }
@@ -3409,7 +3416,7 @@ export namespace Protocol {
             clientSecurityState?: Network.ClientSecurityState;
         }
 
-        export type AttributionReportingIssueType = ('PermissionPolicyDisabled' | 'PermissionPolicyNotDelegated' | 'UntrustworthyReportingOrigin' | 'InsecureContext' | 'InvalidHeader' | 'InvalidRegisterTriggerHeader' | 'InvalidEligibleHeader' | 'TooManyConcurrentRequests' | 'SourceAndTriggerHeaders' | 'SourceIgnored' | 'TriggerIgnored');
+        export type AttributionReportingIssueType = ('PermissionPolicyDisabled' | 'UntrustworthyReportingOrigin' | 'InsecureContext' | 'InvalidHeader' | 'InvalidRegisterTriggerHeader' | 'SourceAndTriggerHeaders' | 'SourceIgnored' | 'TriggerIgnored' | 'OsSourceIgnored' | 'OsTriggerIgnored' | 'InvalidRegisterOsSourceHeader' | 'InvalidRegisterOsTriggerHeader' | 'WebAndOsHeaders' | 'NoWebOrOsSupport');
 
         /**
          * Details for issues around "Attribution Reporting API" usage.
@@ -3443,7 +3450,7 @@ export namespace Protocol {
             location?: SourceCodeLocation;
         }
 
-        export type GenericIssueErrorType = ('CrossOriginPortalPostMessageError' | 'FormLabelForNameError' | 'FormDuplicateIdForInputError' | 'FormInputWithNoLabelError' | 'FormAutocompleteAttributeEmptyError' | 'FormEmptyIdAndNameAttributesForInputError' | 'FormAriaLabelledByToNonExistingId' | 'FormInputAssignedAutocompleteValueToIdOrNameAttributeError' | 'FormLabelHasNeitherForNorNestedInput' | 'FormLabelForMatchesNonExistingIdError');
+        export type GenericIssueErrorType = ('CrossOriginPortalPostMessageError' | 'FormLabelForNameError' | 'FormDuplicateIdForInputError' | 'FormInputWithNoLabelError' | 'FormAutocompleteAttributeEmptyError' | 'FormEmptyIdAndNameAttributesForInputError' | 'FormAriaLabelledByToNonExistingId' | 'FormInputAssignedAutocompleteValueToIdOrNameAttributeError' | 'FormLabelHasNeitherForNorNestedInput' | 'FormLabelForMatchesNonExistingIdError' | 'FormInputHasWrongButWellIntendedAutocompleteValueError');
 
         /**
          * Depending on the concrete errorType, different properties are set.
@@ -3455,6 +3462,7 @@ export namespace Protocol {
             errorType: GenericIssueErrorType;
             frameId?: Page.FrameId;
             violatingNodeId?: DOM.BackendNodeId;
+            violatingNodeAttribute?: string;
         }
 
         /**
@@ -3470,6 +3478,17 @@ export namespace Protocol {
             type: string;
         }
 
+        /**
+         * This issue warns about sites in the redirect chain of a finished navigation
+         * that may be flagged as trackers and have their state cleared if they don't
+         * receive a user interaction. Note that in this context 'site' means eTLD+1.
+         * For example, if the URL `https://example.test:80/bounce` was in the
+         * redirect chain, the site reported would be `example.test`.
+         */
+        export interface BounceTrackingIssueDetails {
+            trackingSites: string[];
+        }
+
         export type ClientHintIssueReason = ('MetaTagAllowListInvalidOrigin' | 'MetaTagModifiedHTML');
 
         export interface FederatedAuthRequestIssueDetails {
@@ -3482,7 +3501,7 @@ export namespace Protocol {
          * third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
          * all cases except for success.
          */
-        export type FederatedAuthRequestIssueReason = ('ShouldEmbargo' | 'TooManyRequests' | 'WellKnownHttpNotFound' | 'WellKnownNoResponse' | 'WellKnownInvalidResponse' | 'WellKnownListEmpty' | 'ConfigNotInWellKnown' | 'WellKnownTooBig' | 'ConfigHttpNotFound' | 'ConfigNoResponse' | 'ConfigInvalidResponse' | 'ClientMetadataHttpNotFound' | 'ClientMetadataNoResponse' | 'ClientMetadataInvalidResponse' | 'DisabledInSettings' | 'ErrorFetchingSignin' | 'InvalidSigninResponse' | 'AccountsHttpNotFound' | 'AccountsNoResponse' | 'AccountsInvalidResponse' | 'AccountsListEmpty' | 'IdTokenHttpNotFound' | 'IdTokenNoResponse' | 'IdTokenInvalidResponse' | 'IdTokenInvalidRequest' | 'ErrorIdToken' | 'Canceled' | 'RpPageNotVisible');
+        export type FederatedAuthRequestIssueReason = ('ShouldEmbargo' | 'TooManyRequests' | 'WellKnownHttpNotFound' | 'WellKnownNoResponse' | 'WellKnownInvalidResponse' | 'WellKnownListEmpty' | 'WellKnownInvalidContentType' | 'ConfigNotInWellKnown' | 'WellKnownTooBig' | 'ConfigHttpNotFound' | 'ConfigNoResponse' | 'ConfigInvalidResponse' | 'ConfigInvalidContentType' | 'ClientMetadataHttpNotFound' | 'ClientMetadataNoResponse' | 'ClientMetadataInvalidResponse' | 'ClientMetadataInvalidContentType' | 'DisabledInSettings' | 'ErrorFetchingSignin' | 'InvalidSigninResponse' | 'AccountsHttpNotFound' | 'AccountsNoResponse' | 'AccountsInvalidResponse' | 'AccountsListEmpty' | 'AccountsInvalidContentType' | 'IdTokenHttpNotFound' | 'IdTokenNoResponse' | 'IdTokenInvalidResponse' | 'IdTokenInvalidRequest' | 'IdTokenInvalidContentType' | 'ErrorIdToken' | 'Canceled' | 'RpPageNotVisible');
 
         /**
          * This issue tracks client hints related issues. It's used to deprecate old
@@ -3498,7 +3517,7 @@ export namespace Protocol {
          * optional fields in InspectorIssueDetails to convey more specific
          * information about the kind of issue.
          */
-        export type InspectorIssueCode = ('CookieIssue' | 'MixedContentIssue' | 'BlockedByResponseIssue' | 'HeavyAdIssue' | 'ContentSecurityPolicyIssue' | 'SharedArrayBufferIssue' | 'TrustedWebActivityIssue' | 'LowTextContrastIssue' | 'CorsIssue' | 'AttributionReportingIssue' | 'QuirksModeIssue' | 'NavigatorUserAgentIssue' | 'GenericIssue' | 'DeprecationIssue' | 'ClientHintIssue' | 'FederatedAuthRequestIssue');
+        export type InspectorIssueCode = ('CookieIssue' | 'MixedContentIssue' | 'BlockedByResponseIssue' | 'HeavyAdIssue' | 'ContentSecurityPolicyIssue' | 'SharedArrayBufferIssue' | 'TrustedWebActivityIssue' | 'LowTextContrastIssue' | 'CorsIssue' | 'AttributionReportingIssue' | 'QuirksModeIssue' | 'NavigatorUserAgentIssue' | 'GenericIssue' | 'DeprecationIssue' | 'ClientHintIssue' | 'FederatedAuthRequestIssue' | 'BounceTrackingIssue');
 
         /**
          * This struct holds a list of optional fields with additional information
@@ -3522,6 +3541,7 @@ export namespace Protocol {
             deprecationIssueDetails?: DeprecationIssueDetails;
             clientHintIssueDetails?: ClientHintIssueDetails;
             federatedAuthRequestIssueDetails?: FederatedAuthRequestIssueDetails;
+            bounceTrackingIssueDetails?: BounceTrackingIssueDetails;
         }
 
         /**
@@ -4239,6 +4259,10 @@ export namespace Protocol {
              * Column offset of the end of the stylesheet within the resource (zero based).
              */
             endColumn: number;
+            /**
+             * If the style sheet was loaded from a network resource, this indicates when the resource failed to load
+             */
+            loadingFailed?: boolean;
         }
 
         /**
@@ -4254,6 +4278,10 @@ export namespace Protocol {
              * Rule selector data.
              */
             selectorList: SelectorList;
+            /**
+             * Array of selectors from ancestor style rules, sorted by distance from the current rule.
+             */
+            nestingSelectors?: string[];
             /**
              * Parent stylesheet's origin.
              */
@@ -4713,6 +4741,36 @@ export namespace Protocol {
             fontVariationAxes?: FontVariationAxis[];
         }
 
+        /**
+         * CSS try rule representation.
+         */
+        export interface CSSTryRule {
+            /**
+             * The css style sheet identifier (absent for user agent stylesheet and user-specified
+             * stylesheet rules) this rule came from.
+             */
+            styleSheetId?: StyleSheetId;
+            /**
+             * Parent stylesheet's origin.
+             */
+            origin: StyleSheetOrigin;
+            /**
+             * Associated style declaration.
+             */
+            style: CSSStyle;
+        }
+
+        /**
+         * CSS position-fallback rule representation.
+         */
+        export interface CSSPositionFallbackRule {
+            name: Value;
+            /**
+             * List of keyframes.
+             */
+            tryRules: CSSTryRule[];
+        }
+
         /**
          * CSS keyframes rule representation.
          */
@@ -4912,6 +4970,10 @@ export namespace Protocol {
              * A list of CSS keyframed animations matching this node.
              */
             cssKeyframesRules?: CSSKeyframesRule[];
+            /**
+             * A list of CSS position fallbacks matching this node.
+             */
+            cssPositionFallbackRules?: CSSPositionFallbackRule[];
             /**
              * Id of the first parent element that does not have display: contents.
              */
@@ -8132,7 +8194,7 @@ export namespace Protocol {
 
         export interface ClearObjectStoreRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8140,6 +8202,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             /**
              * Database name.
              */
@@ -8152,7 +8218,7 @@ export namespace Protocol {
 
         export interface DeleteDatabaseRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8160,6 +8226,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             /**
              * Database name.
              */
@@ -8168,7 +8238,7 @@ export namespace Protocol {
 
         export interface DeleteObjectStoreEntriesRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8176,6 +8246,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             databaseName: string;
             objectStoreName: string;
             /**
@@ -8186,7 +8260,7 @@ export namespace Protocol {
 
         export interface RequestDataRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8194,6 +8268,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             /**
              * Database name.
              */
@@ -8233,7 +8311,7 @@ export namespace Protocol {
 
         export interface GetMetadataRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8241,6 +8319,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             /**
              * Database name.
              */
@@ -8266,7 +8348,7 @@ export namespace Protocol {
 
         export interface RequestDatabaseRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8274,6 +8356,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
             /**
              * Database name.
              */
@@ -8289,7 +8375,7 @@ export namespace Protocol {
 
         export interface RequestDatabaseNamesRequest {
             /**
-             * At least and at most one of securityOrigin, storageKey must be specified.
+             * At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.
              * Security origin.
              */
             securityOrigin?: string;
@@ -8297,6 +8383,10 @@ export namespace Protocol {
              * Storage key.
              */
             storageKey?: string;
+            /**
+             * Storage bucket. If not specified, it uses the default bucket.
+             */
+            storageBucket?: Storage.StorageBucket;
         }
 
         export interface RequestDatabaseNamesResponse {
@@ -12358,7 +12448,7 @@ export namespace Protocol {
          * All Permissions Policy features. This enum should match the one defined
          * in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
          */
-        export type PermissionsPolicyFeature = ('accelerometer' | 'ambient-light-sensor' | 'attribution-reporting' | 'autoplay' | 'bluetooth' | 'browsing-topics' | 'camera' | 'ch-dpr' | 'ch-device-memory' | 'ch-downlink' | 'ch-ect' | 'ch-prefers-color-scheme' | 'ch-prefers-reduced-motion' | 'ch-rtt' | 'ch-save-data' | 'ch-ua' | 'ch-ua-arch' | 'ch-ua-bitness' | 'ch-ua-platform' | 'ch-ua-model' | 'ch-ua-mobile' | 'ch-ua-full' | 'ch-ua-full-version' | 'ch-ua-full-version-list' | 'ch-ua-platform-version' | 'ch-ua-reduced' | 'ch-ua-wow64' | 'ch-viewport-height' | 'ch-viewport-width' | 'ch-width' | 'clipboard-read' | 'clipboard-write' | 'compute-pressure' | 'cross-origin-isolated' | 'direct-sockets' | 'display-capture' | 'document-domain' | 'encrypted-media' | 'execution-while-out-of-viewport' | 'execution-while-not-rendered' | 'focus-without-user-activation' | 'fullscreen' | 'frobulate' | 'gamepad' | 'geolocation' | 'gyroscope' | 'hid' | 'identity-credentials-get' | 'idle-detection' | 'interest-cohort' | 'join-ad-interest-group' | 'keyboard-map' | 'local-fonts' | 'magnetometer' | 'microphone' | 'midi' | 'otp-credentials' | 'payment' | 'picture-in-picture' | 'private-aggregation' | 'publickey-credentials-get' | 'run-ad-auction' | 'screen-wake-lock' | 'serial' | 'shared-autofill' | 'shared-storage' | 'shared-storage-select-url' | 'smart-card' | 'storage-access' | 'sync-xhr' | 'trust-token-redemption' | 'unload' | 'usb' | 'vertical-scroll' | 'web-share' | 'window-management' | 'window-placement' | 'xr-spatial-tracking');
+        export type PermissionsPolicyFeature = ('accelerometer' | 'ambient-light-sensor' | 'attribution-reporting' | 'autoplay' | 'bluetooth' | 'browsing-topics' | 'camera' | 'ch-dpr' | 'ch-device-memory' | 'ch-downlink' | 'ch-ect' | 'ch-prefers-color-scheme' | 'ch-prefers-reduced-motion' | 'ch-rtt' | 'ch-save-data' | 'ch-ua' | 'ch-ua-arch' | 'ch-ua-bitness' | 'ch-ua-platform' | 'ch-ua-model' | 'ch-ua-mobile' | 'ch-ua-full' | 'ch-ua-full-version' | 'ch-ua-full-version-list' | 'ch-ua-platform-version' | 'ch-ua-reduced' | 'ch-ua-wow64' | 'ch-viewport-height' | 'ch-viewport-width' | 'ch-width' | 'clipboard-read' | 'clipboard-write' | 'compute-pressure' | 'cross-origin-isolated' | 'direct-sockets' | 'display-capture' | 'document-domain' | 'encrypted-media' | 'execution-while-out-of-viewport' | 'execution-while-not-rendered' | 'focus-without-user-activation' | 'fullscreen' | 'frobulate' | 'gamepad' | 'geolocation' | 'gyroscope' | 'hid' | 'identity-credentials-get' | 'idle-detection' | 'interest-cohort' | 'join-ad-interest-group' | 'keyboard-map' | 'local-fonts' | 'magnetometer' | 'microphone' | 'midi' | 'otp-credentials' | 'payment' | 'picture-in-picture' | 'private-aggregation' | 'private-state-token-issuance' | 'private-state-token-redemption' | 'publickey-credentials-get' | 'run-ad-auction' | 'screen-wake-lock' | 'serial' | 'shared-autofill' | 'shared-storage' | 'shared-storage-select-url' | 'smart-card' | 'storage-access' | 'sync-xhr' | 'unload' | 'usb' | 'vertical-scroll' | 'web-share' | 'window-management' | 'window-placement' | 'xr-spatial-tracking');
 
         /**
          * Reason for a permissions policy feature to be disabled.
@@ -12901,16 +12991,6 @@ export namespace Protocol {
             children: BackForwardCacheNotRestoredExplanationTree[];
         }
 
-        /**
-         * List of FinalStatus reasons for Prerender2.
-         */
-        export type PrerenderFinalStatus = ('Activated' | 'Destroyed' | 'LowEndDevice' | 'InvalidSchemeRedirect' | 'InvalidSchemeNavigation' | 'InProgressNavigation' | 'NavigationRequestBlockedByCsp' | 'MainFrameNavigation' | 'MojoBinderPolicy' | 'RendererProcessCrashed' | 'RendererProcessKilled' | 'Download' | 'TriggerDestroyed' | 'NavigationNotCommitted' | 'NavigationBadHttpStatus' | 'ClientCertRequested' | 'NavigationRequestNetworkError' | 'MaxNumOfRunningPrerendersExceeded' | 'CancelAllHostsForTesting' | 'DidFailLoad' | 'Stop' | 'SslCertificateError' | 'LoginAuthRequested' | 'UaChangeRequiresReload' | 'BlockedByClient' | 'AudioOutputDeviceRequested' | 'MixedContent' | 'TriggerBackgrounded' | 'EmbedderTriggeredAndCrossOriginRedirected' | 'MemoryLimitExceeded' | 'FailToGetMemoryUsage' | 'DataSaverEnabled' | 'HasEffectiveUrl' | 'ActivatedBeforeStarted' | 'InactivePageRestriction' | 'StartFailed' | 'TimeoutBackgrounded' | 'CrossSiteRedirect' | 'CrossSiteNavigation' | 'SameSiteCrossOriginRedirect' | 'SameSiteCrossOriginNavigation' | 'SameSiteCrossOriginRedirectNotOptIn' | 'SameSiteCrossOriginNavigationNotOptIn' | 'ActivationNavigationParameterMismatch' | 'ActivatedInBackground' | 'EmbedderHostDisallowed' | 'ActivationNavigationDestroyedBeforeSuccess' | 'TabClosedByUserGesture' | 'TabClosedWithoutUserGesture' | 'PrimaryMainFrameRendererProcessCrashed' | 'PrimaryMainFrameRendererProcessKilled' | 'ActivationFramePolicyNotCompatible' | 'PreloadingDisabled' | 'BatterySaverEnabled' | 'ActivatedDuringMainFrameNavigation' | 'PreloadingUnsupportedByWebContents');
-
-        /**
-         * List of Prefetch status, which refers to PreloadingTriggeringOutcome.
-         */
-        export type PrefetchStatus = ('Running' | 'Ready' | 'Success' | 'Failure' | 'NotSupported');
-
         export interface AddScriptToEvaluateOnLoadRequest {
             scriptSource: string;
         }
@@ -13929,36 +14009,6 @@ export namespace Protocol {
             notRestoredExplanationsTree?: BackForwardCacheNotRestoredExplanationTree;
         }
 
-        /**
-         * Fired when a prerender attempt is completed.
-         */
-        export interface PrerenderAttemptCompletedEvent {
-            /**
-             * The frame id of the frame initiating prerendering.
-             */
-            initiatingFrameId: FrameId;
-            prerenderingUrl: string;
-            finalStatus: PrerenderFinalStatus;
-            /**
-             * This is used to give users more information about the name of the API call
-             * that is incompatible with prerender and has caused the cancellation of the attempt
-             */
-            disallowedApiMethod?: string;
-        }
-
-        /**
-         * TODO(crbug/1384419): Create a dedicated domain for preloading.
-         * Fired when a prefetch attempt is updated.
-         */
-        export interface PrefetchStatusUpdatedEvent {
-            /**
-             * The frame id of the frame initiating prefetch.
-             */
-            initiatingFrameId: FrameId;
-            prefetchUrl: string;
-            status: PrefetchStatus;
-        }
-
         export interface LoadEventFiredEvent {
             timestamp: Network.MonotonicTime;
         }
@@ -14604,7 +14654,7 @@ export namespace Protocol {
         /**
          * Enum of possible storage types.
          */
-        export type StorageType = ('appcache' | 'cookies' | 'file_systems' | 'indexeddb' | 'local_storage' | 'shader_cache' | 'websql' | 'service_workers' | 'cache_storage' | 'interest_groups' | 'shared_storage' | 'all' | 'other');
+        export type StorageType = ('appcache' | 'cookies' | 'file_systems' | 'indexeddb' | 'local_storage' | 'shader_cache' | 'websql' | 'service_workers' | 'cache_storage' | 'interest_groups' | 'shared_storage' | 'storage_buckets' | 'all' | 'other');
 
         /**
          * Usage for a storage type.
@@ -14758,6 +14808,28 @@ export namespace Protocol {
             ignoreIfPresent?: boolean;
         }
 
+        export type StorageBucketsDurability = ('relaxed' | 'strict');
+
+        export interface StorageBucket {
+            storageKey: SerializedStorageKey;
+            /**
+             * If not specified, it is the default bucket of the storageKey.
+             */
+            name?: string;
+        }
+
+        export interface StorageBucketInfo {
+            bucket: StorageBucket;
+            id: string;
+            expiration: Network.TimeSinceEpoch;
+            /**
+             * Storage quota (bytes).
+             */
+            quota: number;
+            persistent: boolean;
+            durability: StorageBucketsDurability;
+        }
+
         export interface GetStorageKeyForFrameRequest {
             frameId: Page.FrameId;
         }
@@ -14991,6 +15063,19 @@ export namespace Protocol {
             enable: boolean;
         }
 
+        export interface SetStorageBucketTrackingRequest {
+            storageKey: string;
+            enable: boolean;
+        }
+
+        export interface DeleteStorageBucketRequest {
+            bucket: StorageBucket;
+        }
+
+        export interface RunBounceTrackingMitigationsResponse {
+            deletedSites: string[];
+        }
+
         /**
          * A cache's contents have been modified.
          */
@@ -15035,6 +15120,10 @@ export namespace Protocol {
              * Storage key to update.
              */
             storageKey: string;
+            /**
+             * Storage bucket to update.
+             */
+            bucketId: string;
             /**
              * Database to update.
              */
@@ -15057,6 +15146,10 @@ export namespace Protocol {
              * Storage key to update.
              */
             storageKey: string;
+            /**
+             * Storage bucket to update.
+             */
+            bucketId: string;
         }
 
         /**
@@ -15096,6 +15189,14 @@ export namespace Protocol {
              */
             params: SharedStorageAccessParams;
         }
+
+        export interface StorageBucketCreatedOrUpdatedEvent {
+            bucketInfo: StorageBucketInfo;
+        }
+
+        export interface StorageBucketDeletedEvent {
+            bucketId: string;
+        }
     }
 
     /**
@@ -16895,6 +16996,246 @@ export namespace Protocol {
             devices: PromptDevice[];
         }
     }
+
+    export namespace Preload {
+
+        /**
+         * Unique id
+         */
+        export type RuleSetId = string;
+
+        /**
+         * Corresponds to SpeculationRuleSet
+         */
+        export interface RuleSet {
+            id: RuleSetId;
+            /**
+             * Identifies a document which the rule set is associated with.
+             */
+            loaderId: Network.LoaderId;
+            /**
+             * Source text of JSON representing the rule set. If it comes from
+             * <script> tag, it is the textContent of the node. Note that it is
+             * a JSON for valid case.
+             * 
+             * See also:
+             * - https://wicg.github.io/nav-speculation/speculation-rules.html
+             * - https://github.com/WICG/nav-speculation/blob/main/triggers.md
+             */
+            sourceText: string;
+            /**
+             * A speculation rule set is either added through an inline
+             * <script> tag or through an external resource via the
+             * 'Speculation-Rules' HTTP header. For the first case, we include
+             * the BackendNodeId of the relevant <script> tag. For the second
+             * case, we include the external URL where the rule set was loaded
+             * from, and also RequestId if Network domain is enabled.
+             * 
+             * See also:
+             * - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script
+             * - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header
+             */
+            backendNodeId?: DOM.BackendNodeId;
+            url?: string;
+            requestId?: Network.RequestId;
+            /**
+             * Error information
+             * `errorMessage` is null iff `errorType` is null.
+             */
+            errorType?: RuleSetErrorType;
+            /**
+             * TODO(https://crbug.com/1425354): Replace this property with structured error.
+             */
+            errorMessage?: string;
+        }
+
+        export type RuleSetErrorType = ('SourceIsNotJsonObject' | 'InvalidRulesSkipped');
+
+        /**
+         * The type of preloading attempted. It corresponds to
+         * mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it
+         * isn't being used by clients).
+         */
+        export type SpeculationAction = ('Prefetch' | 'Prerender');
+
+        /**
+         * Corresponds to mojom::SpeculationTargetHint.
+         * See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints
+         */
+        export type SpeculationTargetHint = ('Blank' | 'Self');
+
+        /**
+         * A key that identifies a preloading attempt.
+         * 
+         * The url used is the url specified by the trigger (i.e. the initial URL), and
+         * not the final url that is navigated to. For example, prerendering allows
+         * same-origin main frame navigations during the attempt, but the attempt is
+         * still keyed with the initial URL.
+         */
+        export interface PreloadingAttemptKey {
+            loaderId: Network.LoaderId;
+            action: SpeculationAction;
+            url: string;
+            targetHint?: SpeculationTargetHint;
+        }
+
+        /**
+         * Lists sources for a preloading attempt, specifically the ids of rule sets
+         * that had a speculation rule that triggered the attempt, and the
+         * BackendNodeIds of <a href> or <area href> elements that triggered the
+         * attempt (in the case of attempts triggered by a document rule). It is
+         * possible for mulitple rule sets and links to trigger a single attempt.
+         */
+        export interface PreloadingAttemptSource {
+            key: PreloadingAttemptKey;
+            ruleSetIds: RuleSetId[];
+            nodeIds: DOM.BackendNodeId[];
+        }
+
+        /**
+         * List of FinalStatus reasons for Prerender2.
+         */
+        export type PrerenderFinalStatus = ('Activated' | 'Destroyed' | 'LowEndDevice' | 'InvalidSchemeRedirect' | 'InvalidSchemeNavigation' | 'InProgressNavigation' | 'NavigationRequestBlockedByCsp' | 'MainFrameNavigation' | 'MojoBinderPolicy' | 'RendererProcessCrashed' | 'RendererProcessKilled' | 'Download' | 'TriggerDestroyed' | 'NavigationNotCommitted' | 'NavigationBadHttpStatus' | 'ClientCertRequested' | 'NavigationRequestNetworkError' | 'MaxNumOfRunningPrerendersExceeded' | 'CancelAllHostsForTesting' | 'DidFailLoad' | 'Stop' | 'SslCertificateError' | 'LoginAuthRequested' | 'UaChangeRequiresReload' | 'BlockedByClient' | 'AudioOutputDeviceRequested' | 'MixedContent' | 'TriggerBackgrounded' | 'EmbedderTriggeredAndCrossOriginRedirected' | 'MemoryLimitExceeded' | 'FailToGetMemoryUsage' | 'DataSaverEnabled' | 'HasEffectiveUrl' | 'ActivatedBeforeStarted' | 'InactivePageRestriction' | 'StartFailed' | 'TimeoutBackgrounded' | 'CrossSiteRedirectInInitialNavigation' | 'CrossSiteNavigationInInitialNavigation' | 'SameSiteCrossOriginRedirectNotOptInInInitialNavigation' | 'SameSiteCrossOriginNavigationNotOptInInInitialNavigation' | 'ActivationNavigationParameterMismatch' | 'ActivatedInBackground' | 'EmbedderHostDisallowed' | 'ActivationNavigationDestroyedBeforeSuccess' | 'TabClosedByUserGesture' | 'TabClosedWithoutUserGesture' | 'PrimaryMainFrameRendererProcessCrashed' | 'PrimaryMainFrameRendererProcessKilled' | 'ActivationFramePolicyNotCompatible' | 'PreloadingDisabled' | 'BatterySaverEnabled' | 'ActivatedDuringMainFrameNavigation' | 'PreloadingUnsupportedByWebContents' | 'CrossSiteRedirectInMainFrameNavigation' | 'CrossSiteNavigationInMainFrameNavigation' | 'SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation' | 'SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation' | 'MemoryPressureOnTrigger' | 'MemoryPressureAfterTriggered');
+
+        export type PreloadEnabledState = ('Enabled' | 'DisabledByDataSaver' | 'DisabledByBatterySaver' | 'DisabledByPreference' | 'NotSupported');
+
+        /**
+         * Preloading status values, see also PreloadingTriggeringOutcome. This
+         * status is shared by prefetchStatusUpdated and prerenderStatusUpdated.
+         */
+        export type PreloadingStatus = ('Pending' | 'Running' | 'Ready' | 'Success' | 'Failure' | 'NotSupported');
+
+        /**
+         * Upsert. Currently, it is only emitted when a rule set added.
+         */
+        export interface RuleSetUpdatedEvent {
+            ruleSet: RuleSet;
+        }
+
+        export interface RuleSetRemovedEvent {
+            id: RuleSetId;
+        }
+
+        /**
+         * Fired when a prerender attempt is completed.
+         */
+        export interface PrerenderAttemptCompletedEvent {
+            key: PreloadingAttemptKey;
+            /**
+             * The frame id of the frame initiating prerendering.
+             */
+            initiatingFrameId: Page.FrameId;
+            prerenderingUrl: string;
+            finalStatus: PrerenderFinalStatus;
+            /**
+             * This is used to give users more information about the name of the API call
+             * that is incompatible with prerender and has caused the cancellation of the attempt
+             */
+            disallowedApiMethod?: string;
+        }
+
+        /**
+         * Fired when a preload enabled state is updated.
+         */
+        export interface PreloadEnabledStateUpdatedEvent {
+            state: PreloadEnabledState;
+        }
+
+        /**
+         * Fired when a prefetch attempt is updated.
+         */
+        export interface PrefetchStatusUpdatedEvent {
+            key: PreloadingAttemptKey;
+            /**
+             * The frame id of the frame initiating prefetch.
+             */
+            initiatingFrameId: Page.FrameId;
+            prefetchUrl: string;
+            status: PreloadingStatus;
+        }
+
+        /**
+         * Fired when a prerender attempt is updated.
+         */
+        export interface PrerenderStatusUpdatedEvent {
+            key: PreloadingAttemptKey;
+            /**
+             * The frame id of the frame initiating prerender.
+             */
+            initiatingFrameId: Page.FrameId;
+            prerenderingUrl: string;
+            status: PreloadingStatus;
+        }
+
+        /**
+         * Send a list of sources for all preloading attempts in a document.
+         */
+        export interface PreloadingAttemptSourcesUpdatedEvent {
+            loaderId: Network.LoaderId;
+            preloadingAttemptSources: PreloadingAttemptSource[];
+        }
+    }
+
+    /**
+     * This domain allows interacting with the FedCM dialog.
+     */
+    export namespace FedCm {
+
+        /**
+         * Whether this is a sign-up or sign-in action for this account, i.e.
+         * whether this account has ever been used to sign in to this RP before.
+         */
+        export type LoginState = ('SignIn' | 'SignUp');
+
+        /**
+         * Corresponds to IdentityRequestAccount
+         */
+        export interface Account {
+            accountId: string;
+            email: string;
+            name: string;
+            givenName: string;
+            pictureUrl: string;
+            idpConfigUrl: string;
+            idpSigninUrl: string;
+            loginState: LoginState;
+            /**
+             * These two are only set if the loginState is signUp
+             */
+            termsOfServiceUrl?: string;
+            privacyPolicyUrl?: string;
+        }
+
+        export interface EnableRequest {
+            /**
+             * Allows callers to disable the promise rejection delay that would
+             * normally happen, if this is unimportant to what's being tested.
+             * (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)
+             */
+            disableRejectionDelay?: boolean;
+        }
+
+        export interface SelectAccountRequest {
+            dialogId: string;
+            accountIndex: integer;
+        }
+
+        export interface DismissDialogRequest {
+            dialogId: string;
+            triggerCooldown?: boolean;
+        }
+
+        export interface DialogShownEvent {
+            dialogId: string;
+            accounts: Account[];
+            /**
+             * These exist primarily so that the caller can verify the
+             * RP context was used appropriately.
+             */
+            title: string;
+            subtitle?: string;
+        }
+    }
 }
 
 export default Protocol;
